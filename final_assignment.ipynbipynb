{"cells":[{"cell_type":"markdown","metadata":{"id":"uh70DOy-BPfk"},"source":["# **Final Assignment**\n","In this assignment, you will implement K-Nearest Neighbour (KNN) and Ordinary Least Square (OLS) regression methods. Download the [excel file](https://docs.google.com/spreadsheets/d/17f6h4h-4x6XMuI4Budcw4Ujoxd0ceogv). The dataset contains 11 columns: `\"bedrooms\"`, `\"bathrooms\"`, `\"sqft_living\"`, `\"sqft_lot\"`, `\"floors\"`, `\"condition\"`, `\"grade\"`, `\"sqft_above\"`, `\"sqft_basement\"`, `\"age\"`and `\"price\"`.\n","Use `pd.read_excel()` to read the file and make prediction of whether a given house is likely to be expensive based on the features related to the house.\n","\n","Use KNN and OLS regression independently to determine and compare their performance in terms of accuracy and confusion matrix.\n","\n","To accomplish this task, you will have to convert the values under `\"price\"` into one of two possible values: **1** and **0** denoting \"expensive\" and \"cheap\" respectively. For this, if the price of the house is less than `450000`, it is \"cheap\"; otherwise it is \"expensive\" . \n","\n","**Note:**This conversion must be done before training for KNN, and after conversa for OLS regression, on each predicted `\"price\"`."]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":12771,"status":"ok","timestamp":1682704267468,"user":{"displayName":"Adiba Haque","userId":"02582555920505249516"},"user_tz":-360},"id":"uzSlzR-r3uqP","outputId":"3d35d721-ca5f-4d4d-b1b9-476d75f37951"},"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}],"source":["import pandas as pd\n","import numpy as np\n","from sklearn.model_selection import train_test_split\n","from sklearn.neighbors import KNeighborsClassifier\n","from sklearn.linear_model import LinearRegression\n","from sklearn.metrics import confusion_matrix, accuracy_score\n","\n","from google.colab import drive\n","drive.mount('/content/drive')\n","Dataset = pd.read_excel(\"/content/drive/MyDrive/Dataset/house_data.xlsx\")\n","\n","Dataset[\"price\"] = np.where(Dataset[\"price\"] >= 450000, 1, 0)\n","\n","X_train, X_test, y_train, y_test = train_test_split(Dataset.drop(\"price\", axis=1), Dataset[\"price\"], test_size=0.2, random_state=42)\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":463,"status":"ok","timestamp":1682704639160,"user":{"displayName":"Adiba Haque","userId":"02582555920505249516"},"user_tz":-360},"id":"P-iWO2o45Lk5","outputId":"f635e423-e774-45f6-d212-b8aae58d22f1"},"outputs":[{"output_type":"stream","name":"stdout","text":["KNN Accuracy:  0.7281980106407587\n","KNN Confusion matrix: \n","[[1570  534]\n"," [ 641 1578]]\n"]}],"source":["# implement KNN algorithm on the training set.\n","# Implement KNN\n","k = 5\n","knn = KNeighborsClassifier(n_neighbors=k)\n","knn.fit(X_train, y_train)\n","\n","# Make prediction\n","y_pred_knn = knn.predict(X_test)\n","\n","# Calculate accuracy\n","acc_knn = accuracy_score(y_test, y_pred_knn)\n","cm_knn = confusion_matrix(y_test, y_pred_knn)\n","\n","print(\"KNN Accuracy: \", acc_knn)\n","print(\"KNN Confusion matrix: \")\n","print(cm_knn)\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"h8CAw5Vm5fQW","outputId":"7d16edd6-cd04-4505-e9ae-102fbe8ecd91","executionInfo":{"status":"ok","timestamp":1682704267471,"user_tz":-360,"elapsed":11,"user":{"displayName":"Adiba Haque","userId":"02582555920505249516"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy of OLS regression:  0.7883414295628036\n","Confusion matrix of OLS regression: \n","[[1797  307]\n"," [ 608 1611]]\n"]}],"source":["#implement OLS regression on the training set\n","# Implement OLS regression\n","ols = LinearRegression()\n","ols.fit(X_train, y_train)\n","\n","# Make predictions on the testing set\n","y_pred_ols = ols.predict(X_test)\n","y_pred_ols = np.where(y_pred_ols>=0.5, 1, 0)\n","\n","# Calculate accuracy and confusion matrix\n","acc_ols = accuracy_score(y_test, y_pred_ols)\n","cm_ols = confusion_matrix(y_test, y_pred_ols)\n","\n","print(\"Accuracy of OLS regression: \", acc_ols)\n","print(\"Confusion matrix of OLS regression: \")\n","print(cm_ols)\n"]},{"cell_type":"code","source":["print(\"Accuracy comparison: \")\n","print(\"KNN: \", acc_knn)\n","print(\"OLS regression: \", acc_ols)\n","\n","print(\"\\nConfusion matrix comparison: \")\n","print(\"KNN: \")\n","print(cm_knn)\n","print(\"OLS regression: \")\n","print(cm_ols)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"i5LyWQPGA_BH","executionInfo":{"status":"ok","timestamp":1682704707456,"user_tz":-360,"elapsed":470,"user":{"displayName":"Adiba Haque","userId":"02582555920505249516"}},"outputId":"93de853b-ed94-48c8-e8e7-f21db92d66c7"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy comparison: \n","KNN:  0.7281980106407587\n","OLS regression:  0.7883414295628036\n","\n","Confusion matrix comparison: \n","KNN: \n","[[1570  534]\n"," [ 641 1578]]\n","OLS regression: \n","[[1797  307]\n"," [ 608 1611]]\n"]}]}],"metadata":{"colab":{"provenance":[{"file_id":"17eyNpDLrAxdvG_w-oMPQfDMwyZAWAOyP","timestamp":1682668525312}]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}